#!/usr/bin/env bash
set -o errexit #abort if any command fails
me=$(basename "$0")

help_message="\
Usage:	$me [<options>] SrcBase RepoUser RepoName
	$me +M -m 'Fix 1234' . blogsj https://blogsj.github.com

Generate deployment with hugo and push source and site (gh-pages)

Options:

  -h, --help               Show this help information.
  -v, --verbose            Increase verbosity. Useful for debugging.
  -e, --allow-empty        Allow deployment of an empty directory.
  -m, --message MESSAGE    Specify the message used when committing
  -n, --no-hash            Don't append the source commit's hash to the deploy commit's message.
  +M, --next-mod	   Increment modification level - add to commit message
  +R, --next-release	   Increment release level - add to commit message
  +V, --next-version	   Increment version level - add to commit message

"

parse_args() {
	# Parse arg flags
	# If something is exposed as an environment variable, set/overwrite it
	# here. Otherwise, set/overwrite the internal variable instead.
	while : ; do
		if [[ $1 = "-h" || $1 = "--help" ]]; then
			echo "$help_message"
			return 9999
		elif [[ $1 = "-v" || $1 = "--verbose" ]]; then
			verbose=true
			shift
		elif [[ $1 = "+R" || $1 = "--next-release" ]]; then
			next_release=true
			shift
		elif [[ $1 = "+M" || $1 = "--next-mod" ]]; then
			next_mod=true
			shift
		elif [[ $1 = "+V" || $1 = "--next-version" ]]; then
			next_version=true
			shift
		elif [[ $1 = "-e" || $1 = "--allow-empty" ]]; then
			allow_empty=true
			shift
		elif [[ ( $1 = "-m" || $1 = "--message" ) && -n $2 ]]; then
			commit_message=$2
			shift 2
		elif [[ $1 = "-n" || $1 = "--no-hash" ]]; then
			GIT_DEPLOY_APPEND_HASH=false
			shift
		else
			break
		fi
	done

	# Parse ordinal arguments
	if [ $# -eq 3 ] ; then
		HugoDir="$1"
		GitUsername="$2"
		GIT_REPO="$3"
	else
		echo Error:Need 3 Ordinal Parameters but supplied "($#)$@" >&2
		return 1
	fi

	# Set internal option vars from the environment and arg flags. All internal
	# vars should be declared here, with sane defaults if applicable.

	# Source directory & target branch.
	deploy_directory=${GIT_DEPLOY_DIR:-dist}
	deploy_branch=${GIT_DEPLOY_BRANCH:-gh-pages}

	#if no user identity is already set in the current git environment, use this:
	GitEmail=${GitUsername}@gmail.com

	#repository to deploy to. must be readable and writable.
	SrcBranch='master'
	SiteBranch='gh-pages'

	#append commit hash to the end of message by default
	append_hash=${GIT_DEPLOY_APPEND_HASH:-true}
	commit_version=1.2.3	# TODO
	version_filename='GitCommit.Version'
	if [ -f $HugoDir/$version_filename ] ; then
		read Version Release Mod < "$HugoDir/$version_filename"
	else
		echo "Warning: Version file $HugoDir/$version_filename doesn't exist - assuming V0.0.0"
	fi
	case $Mod in
		''|*[!0-9]*)	Mod=0 ;;
	esac
	[[ -n next_mod ]] && (( Mod=Mod+1 ))
	case $Release in
		''|*[!0-9]*)	Release=0 ;;
	esac
	[[ -n next_release ]] && (( Release=Release+1 ))
	case $Version in
		''|*[!0-9]*)	Version=0 ;;
	esac
	[[ -n next_version ]] && (( Version=Version+1 ))
}

main() {
	ParmList="$@"
	if ! parse_args "$@"; then
		if [ $? -eq 9999 ] ; then
			return 0
		else
			echo Error:incorrect parameters "$ParmList" >&2
			return 1
		fi
	fi
	if [ -d $HugoDir ] ; then
		cd $HugoDir
	else
		echo "Error:$HugoDir isn't a directory" >&2
		return 1
	fi

	if [ ! -d "$deploy_directory" ]; then
		echo "Deploy directory '$deploy_directory' does not exist. Aborting." >&2
		return 1
	fi
	
	# must use short form of flag in ls for compatibility with OS X and BSD
	if [[ -z `ls -A "$deploy_directory" 2> /dev/null` && -z $allow_empty ]]; then
		echo "Deploy directory '$deploy_directory' is empty. Aborting. If you're sure you want to deploy an empty tree, use the --allow-empty / -e flag." >&2
		return 1
	fi

	enable_expanded_output

	if ! git diff --exit-code --quiet --cached; then
		echo Error:uncommitted changes in the index >&2
		return 1
	fi

	commit_title=`git log -n 1 --format="%s" HEAD`
	commit_hash=` git log -n 1 --format="%H" HEAD`
	
	#default commit message uses last title if a custom one is not supplied
	if [[ -z $commit_message ]]; then
		commit_message="publish:($commit_version)$commit_title"
	fi
	
	#append hash to commit message unless no hash flag was found
	if [ $append_hash = true ]; then
		commit_message="$commit_message"$'\n\n'"generated from commit $commit_hash"
	fi
		
	previous_branch=`git rev-parse --abbrev-ref HEAD`

	if git ls-remote --exit-code $repo "refs/heads/$deploy_branch" ; then
		# deploy_branch exists in $repo; make sure we have the latest version
		
		disable_expanded_output
		git fetch --force $repo $deploy_branch:$deploy_branch
		enable_expanded_output
	fi

	# check if deploy_branch exists locally
	if git show-ref --verify --quiet "refs/heads/$deploy_branch"
	then incremental_deploy
	else initial_deploy
	fi

	restore_head
	cd -
}

initial_deploy() {
	git --work-tree "$deploy_directory" checkout --orphan $deploy_branch
	git --work-tree "$deploy_directory" add --all
	commit+push
}

incremental_deploy() {
	#make deploy_branch the current branch
	git symbolic-ref HEAD refs/heads/$deploy_branch
	#put the previously committed contents of deploy_branch into the index
	git --work-tree "$deploy_directory" reset --mixed --quiet
	git --work-tree "$deploy_directory" add --all

	set +o errexit
	diff=$(git --work-tree "$deploy_directory" diff --exit-code --quiet HEAD --)$?
	set -o errexit
	case $diff in
		0) echo No changes to files in $deploy_directory. Skipping commit.;;
		1) commit+push;;
		*)
			echo git diff exited with code $diff. Aborting. Staying on branch $deploy_branch so you can debug. To switch back to master, use: git symbolic-ref HEAD refs/heads/master && git reset --mixed >&2
			return $diff
			;;
	esac
}

commit+push() {
	set_user_id
	git --work-tree "$deploy_directory" commit -m "$commit_message"

	disable_expanded_output
	#--quiet is important here to avoid outputting the repo URL, which may contain a secret token
	git push --quiet $srcremote $SrcBranch
	git push --quiet $siteremote $SiteBranch
	enable_expanded_output
}

#echo expanded commands as they are executed (for debugging)
enable_expanded_output() {
	if [ $verbose ]; then
		set -o xtrace
		set +o verbose
	fi
}

#this is used to avoid outputting the repo URL, which may contain a secret token
disable_expanded_output() {
	if [ $verbose ]; then
		set +o xtrace
		set -o verbose
	fi
}

set_user_id() {
	if [[ -z `git config user.name` ]]; then
		git config user.name "$GitUsername"
	fi
	if [[ -z `git config user.email` ]]; then
		git config user.email "$GitEmail"
	fi
}

restore_head() {
	if [[ $previous_branch = "HEAD" ]]; then
		#we weren't on any branch before, so just set HEAD back to the commit it was on
		git update-ref --no-deref HEAD $commit_hash $deploy_branch
	else
		git symbolic-ref HEAD refs/heads/$previous_branch
	fi
	
	git reset --mixed
}

filter() {
	sed -e "s|$repo|\$repo|g"
}

sanitize() {
	"$@" 2> >(filter 1>&2) | filter
}

[[ $1 = --source-only ]] || main "$@"
